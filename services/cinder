# lib/cinder
#
# ``deploy.sh`` calls in this order:
#
# - install_cinder
# - configure_cinder
# - init_cinder
# - start_cinder
# - stop_cinder
# - cleanup_cinder

CINDER_DB_NAME=${CINDER_DB_NAME:-cinder}
CINDER_DB_USERNAME=${CINDER_DB_USERNAME:-cinder}
CINDER_DB_PASSWORD=${CINDER_DB_PASSWORD:-cinder}
CINDER_OS_TENANT_NAME=${CINDER_OS_TENANT_NAME:-openstack}
CINDER_OS_USERNAME=${CINDER_OS_USERNAME:-cinder}
CINDER_OS_PASSWORD=${CINDER_OS_PASSWORD:-admin}

CINDER_BIND_HOST=${CINDER_BIND_HOST:-$HOST_ADDRESS}

install_cinder() {
    echo "Installing cinder ..."
    # install cinder related packages
    install_package openstack-cinder
}

configure_cinder() {
    echo "Configuring cinder ..."
    # modify cinder config file
    local cinder_conf='/etc/cinder/cinder.conf'
    if [[ -f "${cinder_conf}" ]]; then
        iniset ${cinder_conf} DEFAULT volule_driver cinder.volume.drivers.vmware.vmdk.VMwareVcVmdkDriver
        iniset ${cinder_conf} DEFAULT volule_driver cinder.volume.drivers.vmware.vmdk.VMwareVcVmdkDriver
        iniset ${cinder_conf} DEFAULT sql_connection mysql://${CINDER_DB_USERNAME}:${CINDER_DB_PASSWORD}@${MYSQL_HOST}/${CINDER_DB_NAME}
        iniset ${cinder_conf} DEFAULT auth_strategy keystone
        iniset ${cinder_conf} DEFAULT vmware_insecure True
        iniset ${cinder_conf} DEFAULT vmware_host_ip "${VCENTER_HOST}"
        iniset ${cinder_conf} DEFAULT vmware_host_username "${VCENTER_USERNAME}"
        iniset ${cinder_conf} DEFAULT vmware_host_password "${VCENTER_PASSWORD}"
        iniset ${cinder_conf} DEFAULT vmware_cluster_name "${VCENTER_CLUSTER_NAME}"
        iniset ${cinder_conf} DEFAULT vmware_volume_folder "${VCENTER_VOLUME_FOLDER}"
    fi
    local cinder_api_conf='/etc/cinder/api-paste.ini'
    if [[ -f "${cinder_api_conf}" ]]; then
        iniset ${cinder_api_conf} filter:authtoken auth_protocol http
        iniset ${cinder_api_conf} filter:authtoken auth_host ${SERVICE_HOST}
        iniset ${cinder_api_conf} filter:authtoken auth_port 35357
        iniset ${cinder_api_conf} filter:authtoken admin_tenant_name ${CINDER_OS_TENANT_NAME}
        iniset ${cinder_api_conf} filter:authtoken admin_user ${CINDER_OS_USERNAME}
        iniset ${cinder_api_conf} filter:authtoken admin_password ${CINDER_OS_PASSWORD}
        iniset ${cinder_api_conf} filter:authtoken signing_dir /var/lib/cinder/keystone-singing-cinder
    fi
}

init_database() {

    ensure_mysql_database "${MYSQL_HOST}" "${CINDER_DB_USERNAME}" "${CINDER_DB_PASSWORD}" "${CINDER_DB_NAME}"
}

ensure_cinder_service_catalog() {
    local service_name='cinder'
    local service_type='volume'
    local service_desc='Cinder Volume Service'
    local public_url="http://${SERVICE_HOST}:8776/v1/\$(tenant_id)s"
    local admin_url="http://${SERVICE_HOST}:8776/v1/\$(tenant_id)s"
    local internal_url="http://${SERVICE_HOST}:8776/v1/\$(tenant_id)s"

    ensure_keystone_service "${service_name}" "${service_type}" "${service_desc}" "${public_url}" "${admin_url}" "${internal_url}"
    ensure_keystone_accounts "${CINDER_OS_TENANT_NAME}" "${CINDER_OS_USERNAME}" "${CINDER_OS_PASSWORD}" 'admin'
}

init_cinder() {
    echo "Initializing cinder ..."
    chkconfig openstack-cinder-api on
    # handle database related config
    init_database
    cinder-manage db sync
    chown cinder:cinder /var/log/cinder
    chown cinder:cinder /var/log/cinder/*
    ensure_cinder_service_catalog
}

start_cinder() {
    # start cinder services
    echo "Starting cinder ..."
    service openstack-cinder-api start
}

stop_cinder() {
    # stop cinder services
    echo "Stopping cinder ..."
    service openstack-cinder-api stop
}

cleanup_cinder() {
    # clean up cinder packages
    echo "Cleaning up cinder ..."
    remove_package openstack-cinder
}
