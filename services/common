# common - common functions
#
#
REPOSERVER=${REPOSERVER:-'127.0.0.1'}
reposdir=${reposdir:-/tmp/liberty}

yum_conf=${reposdir}/yum.conf
repo_conf=${reposdir}/liberty.repo

init_repository() {
    mkdir -p ${reposdir}
    cat > ${yum_conf} << EOF
[main]
keepcache=0
debuglevel=2
exactarch=1
obsoletes=1
plugins=0
gpgcheck=0
installonly_limit=5
reposdir=${reposdir}
cachedir=${reposdir}
logfile=${reposdir}/yum.log
EOF

    cat > ${repo_conf} << EOF
[openstack]
name=OpenStack packages
baseurl=http://${REPOSERVER}/centos/\$releasever/\$basearch
enabled=1
gpgcheck=0
EOF
}

# generate yum config file
init_repository

is_controller_node() {
    if [[ ",${NODE_ROLES}," =~ ",controller," ]]; then
        return 0
    else
        return 1
    fi
}

is_compute_node() {
    if [[ ",${NODE_ROLES}," =~ ",compute," ]]; then
        return 0
    else
        return 1
    fi
}

install_package() {
    local YUM="yum -c ${yum_conf}"
    ${YUM} install -y "$@"
}

remove_package() {
    local YUM="yum -c ${yum_conf}"
    ${YUM} remove -y "$@"
}

# service management helpers
enable_service() {
    local CMD="systemctl enable"
    ${CMD} "$@"
}

disable_service() {
    local CMD="systemctl disable"
    ${CMD} "$@"
}

start_service() {
    local CMD="systemctl start"
    ${CMD} "$@"
}

stop_service() {
    local CMD="systemctl stop"
    ${CMD} "$@"
}

# Comment an option in an INI file
# inicomment config-file section option
inicomment() {
    local file=$1
    local section=$2
    local option=$3
    sed -i -e "/^\[$section\]/,/^\[.*\]/ s|^\($option[ \t]*=.*$\)|#\1|" "$file"
}

# Uncomment an option in an INI file
# iniuncomment config-file section option
iniuncomment() {
    local file=$1
    local section=$2
    local option=$3
    sed -i -e "/^\[$section\]/,/^\[.*\]/ s|[^ \t]*#[ \t]*\($option[ \t]*=.*$\)|\1|" "$file"
}

# Get an option from an INI file
# iniget config-file section option
iniget() {
    local file=$1
    local section=$2
    local option=$3
    local line
    line=$(sed -ne "/^\[$section\]/,/^\[.*\]/ { /^$option[ \t]*=/ p; }" "$file")
    echo ${line#*=}
}

# Determinate is the given option present in the INI file
# ini_has_option config-file section option
ini_has_option() {
    local file=$1
    local section=$2
    local option=$3
    local line
    line=$(sed -ne "/^\[$section\]/,/^\[.*\]/ { /^$option[ \t]*=/ p; }" "$file")
    [ -n "$line" ]
}

# Set an option in an INI file
# iniset config-file section option value
iniset() {
    local file=$1
    local section=$2
    local option=$3
    local value=$4
    if ! grep -q "^\[$section\]" "$file"; then
        # Add section at the end
        echo -e "\n[$section]" >>"$file"
    fi
    if ! ini_has_option "$file" "$section" "$option"; then
        # Add it
        sed -i -e "/^\[$section\]/ a\\
$option = $value
" "$file"
    else
        # Replace it
        sed -i -e "/^\[$section\]/,/^\[.*\]/ s|^\($option[ \t]*=[ \t]*\).*$|\1$value|" "$file"
    fi
}

# Grab a numbered field from python prettytable output
# Fields are numbered starting with 1
# Reverse syntax is supported: -1 is the last field, -2 is second to last, etc.
get_field() {
    while read data; do
        if [ "$1" -lt 0 ]; then
            field="(\$(NF$1))"
        else
            field="\$$(($1 + 1))"
        fi
        echo "$data" | awk -F'[ \t]*\\|[ \t]*' "{print $field}"
    done
}

get_id () {
    echo `"$@" | grep ' id ' | awk '{print $4}'`
}

get_project_id() {
    local project_name=$1
    openstack project list | grep " ${project_name} " | get_field 1
}

get_user_id() {
    local username=$1
    openstack user list | grep " ${username} " | get_field 1
}

get_role_id() {
    local role_name=$1
    openstack role list | grep " ${role_name} " | get_field 1
}

get_service_id() {
    local service_name=$1
    openstack service list | grep " ${service_name} " | get_field 1
}

get_user_role() {
    local project_name=$1
    local username=$2
    local role_name=$3
    openstack role list --project "${project_name}" --user "${username}" | grep " ${role_name} " | get_field 1
}

ensure_keystone_project() {
    local project_name=$1
    local project_id=$(get_project_id "${project_name}")

    if [[ -z "${project_id}" ]]; then
        openstack project create --domain default --description "${project_name}" "${project_name}"
    fi
}

ensure_keystone_user() {
    local username=$1
    local password=$2
    local user_id=$(get_user_id "${username}")

    # create user if not exists
    if [[ -z "${user_id}" ]]; then
        openstack user create --domain default --password "${password}" "${username}"
    fi
    # reset user password
    #openstack user password set --password "${password}" "${username}"
}

ensure_keystone_role() {
    local role_name=$1
    local role_id=$(get_role_id "${role_name}")

    if [[ -z "${role_id}" ]]; then
        openstack role create "${role_name}"
    fi
}

ensure_keystone_user_role() {
    local project_name=$1
    local username=$2
    local role_name=$3
    local user_role=$(get_user_role "${project_name}" "${username}" "${role_name}")

    ensure_keystone_role "${role_name}"

    if [[ -z "${user_role}" ]]; then
        openstack role add --project "${project_name}" --user "${username}" "${role_name}"
    fi
}

init_keystone_auth() {
    local keystone_conf='/etc/keystone/keystone.conf'
    export OS_CACHE=false
    export OS_TOKEN=$(iniget "${keystone_conf}" DEFAULT admin_token)
    export OS_URL="http://${SERVICE_HOST}:35357/v3"
    export OS_IDENTITY_API_VERSION=3
}

ensure_keystone_accounts() {
    local project_name=$1
    local username=$2
    local password=$3
    local role_name=$4

    init_keystone_auth
    ensure_keystone_project "${project_name}"
    ensure_keystone_user "${username}" "${password}"
    ensure_keystone_user_role "${project_name}" "${username}" "${role_name}"
}

ensure_keystone_service() {
    local service_name=$1
    local service_type=$2
    local service_desc=$3
    local public_url=$4
    local internal_url=$5
    local admin_url=$6

    init_keystone_auth
    service_id=$(get_service_id "${service_name}")
    if [[ -z "${service_id}" ]]; then
        service_id=$(get_id openstack service create "${service_type}" \
                --name "${service_name}" --description "${service_desc}")
        openstack endpoint create --region RegionOne "${service_type}" public "${public_url}"
        openstack endpoint create --region RegionOne "${service_type}" internal "${internal_url}"
        openstack endpoint create --region RegionOne "${service_type}" admin "${admin_url}"
    fi
}

ensure_mysql_database() {
    local mysql_host=$1
    local mysql_username=$2
    local mysql_password=$3
    local mysql_db_name=$4

    ssh root@${mysql_host} /bin/bash <<EOF
mysql -e "CREATE DATABASE IF NOT EXISTS ${mysql_db_name}"
mysql -e "GRANT ALL ON ${mysql_db_name}.* TO '${mysql_username}'@'localhost' IDENTIFIED BY '${mysql_password}'"
mysql -e "GRANT ALL ON ${mysql_db_name}.* TO '${mysql_username}'@'%' IDENTIFIED BY '${mysql_password}'"
mysql -e "FLUSH PRIVILEGES"
EOF
}
