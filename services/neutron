# lib/neutron
#
# ``deploy.sh`` calls in this order:
#
# - install_neutron
# - configure_neutron
# - init_neutron
# - start_neutron
# - stop_neutron
# - cleanup_neutron


NEUTRON_DB_NAME=${NEUTRON_DB_NAME:-neutron}
NEUTRON_DB_USERNAME=${NEUTRON_DB_USERNAME:-neutron}
NEUTRON_DB_PASSWORD=${NEUTRON_DB_PASSWORD:-neutron}
NEUTRON_OS_TENANT_NAME=${NEUTRON_OS_TENANT_NAME:-openstack}
NEUTRON_OS_USERNAME=${NEUTRON_OS_USERNAME:-neutron}
NEUTRON_OS_PASSWORD=${NEUTRON_OS_PASSWORD:-admin}
NOVA_OS_TENANT_NAME=${NOVA_OS_TENANT_NAME:-openstack}
NOVA_OS_USERNAME=${NOVA_OS_USERNAME:-nova}
NOVA_OS_PASSWORD=${NOVA_OS_PASSWORD:-admin}


install_neutron() {
    # install neutron related packages
    echo "Installing neutron ..."
    if is_controller_node; then
        install_package openstack-neutron \
                        openstack-neutron-ml2 \
                        openstack-neutron-linuxbridge \
                        ebtables ipset
    fi
    if is_compute_node; then
        install_package openstack-neutron \
                        openstack-neutron-linuxbridge \
                        ebtables ipset
    fi
}


configure_neutron() {
    # modify neutron config file
    echo "Configuring neutron ..."
    local neutron_conf='/etc/neutron/neutron.conf'
    if [[ -f "${neutron_conf}" ]]; then
        echo -n > "$neutron_conf"
        # database
        iniset ${neutron_conf} database connection mysql://${NEUTRON_DB_USERNAME}:${NEUTRON_DB_PASSWORD}@${MYSQL_HOST}/${NEUTRON_DB_NAME}
        # rpc
        iniset ${neutron_conf} DEFAULT core_plugin ml2
        iniset ${neutron_conf} DEFAULT service_plugins router
        iniset ${neutron_conf} oslo_messaging_rabbit rabbit_hosts "${RABBIT_HOSTS}"
        iniset ${neutron_conf} oslo_messaging_rabbit rabbit_userid "guest"
        iniset ${neutron_conf} oslo_messaging_rabbit rabbit_password "guest"
        # keystone auth
        iniset ${neutron_conf} DEFAULT auth_strategy keystone
        iniset ${neutron_conf} keystone_authtoken project_domain_id default
        iniset ${neutron_conf} keystone_authtoken user_domain_id default
        iniset ${neutron_conf} keystone_authtoken auth_plugin password
        iniset ${neutron_conf} keystone_authtoken auth_uri http://${SERVICE_HOST}:5000
        iniset ${neutron_conf} keystone_authtoken auth_url http://${SERVICE_HOST}:35357
        iniset ${neutron_conf} keystone_authtoken project_name ${NEUTRON_OS_TENANT_NAME}
        iniset ${neutron_conf} keystone_authtoken username ${NEUTRON_OS_USERNAME}
        iniset ${neutron_conf} keystone_authtoken password ${NEUTRON_OS_PASSWORD}
        # nova
        iniset ${neutron_conf} DEFAULT notify_nova_on_port_status_changes True
        iniset ${neutron_conf} DEFAULT notify_nova_on_port_data_changes True
        iniset ${neutron_conf} DEFAULT nova_url http://${SERVICE_HOST}:8774/v2
        iniset ${neutron_conf} nova project_domain_id default
        iniset ${neutron_conf} nova user_domain_id default
        iniset ${neutron_conf} nova auth_plugin password
        iniset ${neutron_conf} nova region_name RegionOne
        iniset ${neutron_conf} nova auth_uri http://${SERVICE_HOST}:5000
        iniset ${neutron_conf} nova auth_url http://${SERVICE_HOST}:35357
        iniset ${neutron_conf} nova project_name ${NOVA_OS_TENANT_NAME}
        iniset ${neutron_conf} nova username ${NOVA_OS_USERNAME}
        iniset ${neutron_conf} nova password ${NOVA_OS_PASSWORD}
        # oslo concurrentcy
        iniset ${neutron_conf} oslo_concurrency lock_path "/var/lib/neutron/tmp"

    fi
    local ml2_conf='/etc/neutron/plugins/ml2/ml2_conf.ini'
    if [[ -f "${ml2_conf}" && is_controller_node ]]; then
        echo -n > "$ml2_conf"
        iniset ${ml2_conf} ml2 type_drivers "flat,vlan,vxlan"
        iniset ${ml2_conf} ml2 tenant_network_types "vxlan"
        iniset ${ml2_conf} ml2 mechanism_drivers "linuxbridge,l2population"
        iniset ${ml2_conf} ml2 extension_drivers port_security
        iniset ${ml2_conf} ml2_type_flat flat_networks public
        iniset ${ml2_conf} ml2_type_vxlan vni_ranges "1:1000"
        iniset ${ml2_conf} securitygroup enable_ipset True
        ln -sf ${ml2_conf} /etc/neutron/plugin.ini
    fi
    local l2_agent_conf='/etc/neutron/plugins/ml2/linuxbridge_agent.ini'
    if [[ -f "${l2_agent_conf}" ]]; then
        echo -n > "$l2_agent_conf"
        iniset ${l2_agent_conf} linux_bridge physical_interface_mappings public:${PUBLIC_INTERFACE}
        iniset ${l2_agent_conf} vxlan enable_vxlan True
        iniset ${l2_agent_conf} vxlan l2_population True
        iniset ${l2_agent_conf} vxlan local_ip ${HOST_ADDRESS}
        iniset ${l2_agent_conf} agent prevent_arp_spoofing True
        iniset ${l2_agent_conf} securitygroup enable_security_group True
        iniset ${l2_agent_conf} securitygroup firewall_driver neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
    fi
    local dhcp_agent_conf='/etc/neutron/dhcp_agent.ini'
    if [[ -f "${dhcp_agent_conf}" && is_controller_node ]]; then
        echo -n > "$dhcp_agent_conf"
        iniset ${dhcp_agent_conf} DEFAULT interface_driver neutron.agent.linux.interface.BridgeInterfaceDriver
        iniset ${dhcp_agent_conf} DEFAULT dhcp_driver neutron.agent.linux.dhcp.Dnsmasq
        iniset ${dhcp_agent_conf} DEFAULT enable_isolated_metadata True
    fi
    local l3_agent_conf='/etc/neutron/l3_agent.ini'
    if [[ -f "${l3_agent_conf}" && is_controller_node ]]; then
        echo -n > "$l3_agent_conf"
        iniset ${l3_agent_conf} DEFAULT interface_driver neutron.agent.linux.interface.BridgeInterfaceDriver
        iniset ${l3_agent_conf} DEFAULT external_network_bridge ""
    fi
    local metadata_agent_conf='/etc/neutron/metadata_agent.ini'
    if [[ -f "${metadata_agent_conf}" && is_controller_node ]]; then
        echo -n > "$metadata_agent_conf"
        iniset ${metadata_agent_conf} DEFAULT project_domain_id default
        iniset ${metadata_agent_conf} DEFAULT user_domain_id default
        iniset ${metadata_agent_conf} DEFAULT auth_plugin password
        iniset ${metadata_agent_conf} DEFAULT auth_uri http://${SERVICE_HOST}:5000
        iniset ${metadata_agent_conf} DEFAULT auth_url http://${SERVICE_HOST}:35357
        iniset ${metadata_agent_conf} DEFAULT project_name ${NEUTRON_OS_TENANT_NAME}
        iniset ${metadata_agent_conf} DEFAULT username ${NEUTRON_OS_USERNAME}
        iniset ${metadata_agent_conf} DEFAULT password ${NEUTRON_OS_PASSWORD}
        iniset ${metadata_agent_conf} DEFAULT nova_metadata_ip ${SERVICE_HOST}
        iniset ${metadata_agent_conf} DEFAULT metadata_proxy_shared_secret "METADATA_SECRET"
    fi
}

init_database() {
    ensure_mysql_database "${MYSQL_HOST}" "${NEUTRON_DB_USERNAME}" "${NEUTRON_DB_PASSWORD}" "${NEUTRON_DB_NAME}"
    neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head
}

ensure_neutron_service_catalog() {
    local service_name='neutron'
    local service_type='network'
    local service_desc='OpenStack Networking Service'
    local public_url="http://${SERVICE_HOST}:9696"
    local internal_url="http://${SERVICE_HOST}:9696"
    local admin_url="http://${SERVICE_HOST}:9696"

    ensure_keystone_service "${service_name}" "${service_type}" "${service_desc}" "${public_url}" "${internal_url}" "${admin_url}"

    ensure_keystone_accounts "${NEUTRON_OS_TENANT_NAME}" "${NEUTRON_OS_USERNAME}" "${NEUTRON_OS_PASSWORD}" 'admin'
}

init_neutron() {
    # handle database related config
    echo "Initializing neutron ..."

    chown neutron:neutron /var/log/neutron
    chown neutron:neutron /var/log/neutron/*

    if is_controller_node; then
        enable_service neutron-server
        enable_service neutron-linuxbridge-agent
        enable_service neutron-dhcp-agent
        enable_service neutron-metadata-agent

        init_database
        ensure_neutron_service_catalog
    fi
    if is_compute_node; then
        enable_service neutron-linuxbridge-agent
    fi
}

start_neutron() {
    # start neutron services
    echo "Starting neutron ..."

    if is_controller_node; then
        start_service neutron-server
        start_service neutron-linuxbridge-agent
        start_service neutron-dhcp-agent
        start_service neutron-l3-agent
        start_service neutron-metadata-agent
    fi
    if is_compute_node; then
        start_service neutron-linuxbridge-agent
    fi
}

stop_neutron() {
    # stop neutron services
    echo "Stopping neutron ..."

    if is_controller_node; then
        stop_service neutron-server
        stop_service neutron-linuxbridge-agent
        stop_service neutron-dhcp-agent
        stop_service neutron-l3-agent
        stop_service neutron-metadata-agent
    fi
    if is_compute_node; then
        stop_service neutron-linuxbridge-agent
    fi
}

cleanup_neutron() {
    # clean up neutron packages
    echo "Cleaning up neutron ..."
    if is_controller_node; then
        remove_package openstack-neutron \
                       openstack-neutron-ml2 \
                       openstack-neutron-linuxbridge \
                       ebtables ipset
    fi
    if is_compute_node; then
        remove_package openstack-neutron \
                       openstack-neutron-linuxbridge \
                       ebtables ipset
    fi
}
